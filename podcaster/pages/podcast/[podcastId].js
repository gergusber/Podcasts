import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import DetailPodcastOverview from '../../components/Podcast/Detail/DetailOverview/detailOverview'
import DetailEpisodes from '../../components/Podcast/Detail/DetailEpisodes/detailEpisodes'
import { getPodcast, getPodcasts, getEpisodesByPodcastId } from '@/helpers/api-util'

const inter = Inter({ subsets: ['latin'] })

export default function PodcastDetailPage(props) {
  const { podcast } = props;
  const listOfEpisodes = podcast.episodes.slice(1);
  if (!podcast) {
    <p>Loading...</p>
  }

  return (
    <>
      <Head>
        <title>Podcaster</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href={podcast.icon} />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.description}>
          <div className={styles.center}>
            <DetailPodcastOverview podcast={podcast} />
            <DetailEpisodes episodes={listOfEpisodes} podcastId ={podcast.id}/>
          </div>
        </div>
      </main>
    </>
  )
}

export async function getStaticPaths(params) {
  const podcasts = await getPodcasts();
  const paths = podcasts.feed.entry.map(podcast => ({ params: { podcastId: podcast.id.attributes['im:id'] } })); // we construct the object of params with all the pIds dynamic 
  return {
    paths,
    fallback: 'blocking'// Set this to true if you have additional dynamic paths that are not listed here
  };
}

export async function getStaticProps(context) {
  const { podcastId } = context.params;
  const podcastSelected = await getPodcast(podcastId);

  if (!podcastSelected || !podcastSelected.results) {
    return {
      notFound: true,
    }
  }
  const podcastsFromDb = await getPodcasts();
  const selectedPodcastData = podcastsFromDb.feed.entry.filter((podcast) => podcast.id.attributes['im:id'] === podcastId)
  const entry = selectedPodcastData[0]
  const name = entry['im:name'].label;
  const author = entry['im:artist'].label;
  const imageSrc = entry['im:image'][1]?.label;
  const id = entry.id.attributes['im:id'];
  const summary = entry.summary.label;
  const title = entry.title.label

  const listOfEpisodes = await getEpisodesByPodcastId(podcastId)

  return {
    props: {
      podcast: {
        summary,
        name,
        author,
        imageSrc,
        id,
        title,
        ...podcastSelected.results[0],
        episodes: listOfEpisodes.results
      }
    },
  };
}
